from django.db import models
import json
from django.utils import timezone
from mainapp.validators import validate_url, validate_xpath
from django.core.exceptions import ValidationError


class CrawlerModel(models.Model):
    """ Object representing a crawler

    name : name of the crawler
    url : url for the start of the crawl
    attributesJson : minimum composed of {"title": xpath_string, "price" : xpath_string} 
    running : boolean

    """
    name = models.TextField()
    url = models.TextField(validators=[validate_url])
    attributesJson = models.TextField(validators=[validate_xpath])
    running = models.BooleanField(default=False)


class MainCrawler(CrawlerModel):
    """ Object representing the main crawler

    (see above)
    """

    def save(self, *args, **kwargs):
        if MainCrawler.objects.exists() and not self.pk:
            # if you'll not check for self.pk
            # then error will also raised in update of exists model
            raise ValidationError('There can be only one MainCrawler instance')
        return super(MainCrawler, self).save(*args, **kwargs)


class ScrapyItem(models.Model):
    """Object storing crawled data

    unique_id : id generated by the scrapyd system
    data : crawled data
    date : date of the crawl
    crawler : crawler object used
    """
    unique_id = models.CharField(max_length=100, null=True)
    data = models.TextField()
    date = models.DateTimeField(default=timezone.now)
    crawler = models.OneToOneField(
        CrawlerModel, related_name='crawler', on_delete=models.CASCADE)

    @property
    def to_dict(self):
        data = {
            'data': json.loads(self.data),
            'date': self.date
        }
        return data

    def __str__(self):
        return self.unique_id


class Comparator(models.Model):
    """ Comparator object
    
    name : name of the comparator
    maincrawler : the main crawler object
    model2 : crawler object compared with the maincrawler object
    fields : describes what are the fields to be compared 
    running : boolean
    """
    
    name = models.TextField()
    maincrawler = models.ForeignKey(
        MainCrawler, related_name="maincrawler", on_delete=models.CASCADE)
    model2 = models.ForeignKey(
        CrawlerModel, related_name="model2", on_delete=models.CASCADE)
    fields = models.TextField()
    running = models.BooleanField(default=False)


class ComparedData(models.Model):
    """Stores compared data"""

    date = models.DateTimeField(default=timezone.now)
    data = models.TextField()
    comparator = models.OneToOneField(Comparator, on_delete=models.CASCADE)
